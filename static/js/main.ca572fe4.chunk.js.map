{"version":3,"sources":["SortingVisualizer/HelperFunctions.ts","SortingVisualizer/algorithms/BubbleSort.ts","SortingVisualizer/algorithms/InsertionSort.ts","SortingVisualizer/algorithms/MergeSort.ts","SortingVisualizer/algorithms/QuickSort.ts","SortingVisualizer/algorithms/SelectionSort.ts","SortingVisualizer/components/ResetArray.tsx","SortingVisualizer/components/Visualizer.tsx","SortingVisualizer/SortingVisualizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["swapBars","arr","firstIndex","secondIndex","a","sleep","temp","ms","Promise","r","setTimeout","generateRandomNum","min","max","Math","floor","random","BubbleSort","len","length","copy","i","j","InsertionSort","array","merge","lowestIndex","middleIndex","highestIndex","setBars","tempArray","k","MergeSort","middle","partition","start","end","pivotIndex","pivotValue","QuickSort","index","SelectionSort","ResetArray","props","data-testid","disabled","disabledButton","onClick","generateBars","style","background","color1","color2","color3","borderRadius","border","color","fontWeight","textTransform","height","padding","marginBottom","boxShadow","textShadow","Visualizer","id","display","alignItems","width","overflow","bars","map","barra","idx","className","backgroundColor","SortingVisualizer","useState","colorin","setColorin","anotherColorin","setAnotherColorin","isDisabled","setDisabledButton","prettyColor","anotherPrettyColor","randomNum","indexOf","push","step","drawEachStep","isAlreadySorted","next","done","value","useEffect","flexDirection","justifyContent","handleClickQuickSort","handleClickMergeSort","handleClickInsertionSort","handleClickSelectionSort","handleClickBubbleSort","href","target","rel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca572fe4.chunk.js","sourcesContent":["export default async function swapBars(\r\n  arr: number[],\r\n  firstIndex: number,\r\n  secondIndex: number\r\n) {\r\n  await sleep(4);\r\n  let temp = arr[firstIndex];\r\n  arr[firstIndex] = arr[secondIndex];\r\n  arr[secondIndex] = temp;\r\n}\r\n\r\nexport async function sleep(ms: number) {\r\n  await new Promise((r) => setTimeout(r, ms));\r\n}\r\n\r\nexport const generateRandomNum = (min: number, max: number) => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n","import swapBars from \"../HelperFunctions\";\r\n\r\nexport async function* BubbleSort(arr: number[]) {\r\n  const len = arr.length;\r\n  const copy = [...arr];\r\n  for (let i = 0; i < len; i++) {\r\n    for (let j = 0; j < len - i - 1; j++) {\r\n      if (copy[j] > copy[j + 1]) {\r\n        yield copy;\r\n        await swapBars(copy, j, j + 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  return copy;\r\n}\r\n","import swapBars from \"../HelperFunctions\";\r\n\r\nexport async function* InsertionSort(array: number[]) {\r\n  let copy = [...array];\r\n  for (let i = 1; i < copy.length; i++) {\r\n    for (let j = i; j > 0; j--) {\r\n      if (copy[j] < copy[j - 1]) {\r\n        await swapBars(copy, j, j - 1);\r\n        yield copy;\r\n      }\r\n    }\r\n  }\r\n  return copy;\r\n}\r\n","import { sleep } from \"../HelperFunctions\";\r\n\r\nasync function merge(\r\n  array: number[],\r\n  lowestIndex: number,\r\n  middleIndex: number,\r\n  highestIndex: number,\r\n  setBars: (arg0: number[]) => void\r\n) {\r\n  let tempArray = [];\r\n  let len = middleIndex - lowestIndex;\r\n  for (let i = 0; i < len; i++) {\r\n    tempArray[i] = array[lowestIndex + i];\r\n    await sleep(4);\r\n  }\r\n  let i = 0;\r\n  let j = middleIndex;\r\n  let k = lowestIndex;\r\n\r\n  while (i < len && j < highestIndex) {\r\n    if (tempArray[i] <= array[j]) {\r\n      await sleep(4);\r\n      array[k++] = tempArray[i++];\r\n      setBars([...array]);\r\n    } else {\r\n      await sleep(4);\r\n      array[k++] = array[j++];\r\n      setBars([...array]);\r\n    }\r\n  }\r\n  while (i < len) {\r\n    await sleep(4);\r\n    array[k++] = tempArray[i++];\r\n    setBars([...array]);\r\n  }\r\n  await sleep(4);\r\n  setBars([...array]);\r\n}\r\n\r\nexport async function MergeSort(\r\n  array: number[],\r\n  lowestIndex: number,\r\n  highestIndex: number,\r\n  setBars: (arg0: number[]) => void\r\n) {\r\n  if (highestIndex - lowestIndex > 1) {\r\n    var middle = lowestIndex + ((highestIndex - lowestIndex) >> 1);\r\n    await MergeSort(array, lowestIndex, middle, setBars);\r\n    await MergeSort(array, middle, highestIndex, setBars);\r\n    await merge(array, lowestIndex, middle, highestIndex, setBars);\r\n    setBars([...array]);\r\n  }\r\n}\r\n","import swapBars from \"../HelperFunctions\";\r\n\r\nasync function partition(\r\n  array: number[],\r\n  start: number,\r\n  end: number,\r\n  setBars: (arg0: number[]) => void\r\n) {\r\n  let pivotIndex = start;\r\n  let pivotValue = array[end];\r\n  for (let i = start; i < end; i++) {\r\n    if (array[i] < pivotValue) {\r\n      await swapBars(array, i, pivotIndex);\r\n      setBars([...array]);\r\n      pivotIndex++;\r\n    }\r\n  }\r\n\r\n  await swapBars(array, pivotIndex, end);\r\n  setBars([...array]);\r\n\r\n  return pivotIndex;\r\n}\r\n\r\nexport async function QuickSort(\r\n  array: number[],\r\n  start: number,\r\n  end: number,\r\n  setBars: (arg0: number[]) => void\r\n) {\r\n  if (start >= end) {\r\n    return [];\r\n  }\r\n\r\n  let index = await partition(array, start, end, setBars);\r\n  await QuickSort(array, start, index - 1, setBars);\r\n  await QuickSort(array, index + 1, end, setBars);\r\n}\r\n","import swapBars from \"../HelperFunctions\";\r\n\r\nexport async function* SelectionSort(array: number[]) {\r\n  let copy = [...array];\r\n  for (let i = 0; i < copy.length; i++) {\r\n    for (let j = i + 1; j < copy.length; j++) {\r\n      if (copy[i] > copy[j]) {\r\n        await swapBars(copy, i, j);\r\n        yield copy;\r\n      }\r\n    }\r\n  }\r\n  return copy;\r\n}\r\n","import React from \"react\";\r\n\r\nconst ResetArray = (props: {\r\n  disabledButton: boolean | undefined;\r\n  generateBars: React.MouseEventHandler<HTMLButtonElement>;\r\n  color1: any;\r\n  color2: any[];\r\n  color3: any;\r\n}) => {\r\n  return (\r\n    <button\r\n      data-testid=\"resetArray\"\r\n      disabled={props.disabledButton}\r\n      onClick={props.generateBars}\r\n      style={{\r\n        background: `linear-gradient(90deg,\r\n            rgba( ${props.color1},${props.color2[0]}, ${props.color3},.7),\r\n            rgba(${props.color1},${props.color2[126]}, ${props.color3},.7) 50%,\r\n            rgba(${props.color1},${props.color2[254]}, ${props.color3},.7) 100%\r\n    )`,\r\n        borderRadius: \"3px\",\r\n        border: \"none\",\r\n        color: \"white\",\r\n        fontWeight: \"bolder\",\r\n        textTransform: \"uppercase\",\r\n        height: \"48px\",\r\n        padding: \"0 30px\",\r\n        marginBottom: \"1em\",\r\n        boxShadow: `0 0 5px 2px rgba(0,0,0,.4)`,\r\n        textShadow: \"0px 0px 5px rgba(0,0,0, .4)\",\r\n      }}\r\n    >\r\n      Generate pretty colors\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ResetArray;\r\n","import React from \"react\";\r\n\r\nconst Visualizer = (props: {\r\n  bars: number[];\r\n  color1: number;\r\n  color3: number;\r\n}) => {\r\n  return (\r\n    <div\r\n      id=\"visualizer\"\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        width: \"90vw\",\r\n        height: \"100%\",\r\n        overflow: \"hidden\",\r\n        boxShadow: \"0px 0px 25px 2px rgba(0,0,0,.25)\",\r\n      }}\r\n    >\r\n      {props.bars.map((barra, idx) => {\r\n        return (\r\n          <div\r\n            data-testid=\"bar\"\r\n            className=\"bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: `rgb(${props.color1},${barra},${props.color3})`,\r\n              height: `${barra / 3.5}vh`,\r\n              width: `100%`,\r\n            }}\r\n          ></div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Visualizer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { BubbleSort } from \"./algorithms/BubbleSort\";\r\nimport { InsertionSort } from \"./algorithms/InsertionSort\";\r\nimport { MergeSort } from \"./algorithms/MergeSort\";\r\nimport { QuickSort } from \"./algorithms/QuickSort\";\r\nimport { SelectionSort } from \"./algorithms/SelectionSort\";\r\nimport ResetArray from \"./components/ResetArray\";\r\nimport Visualizer from \"./components/Visualizer\";\r\nimport { generateRandomNum } from \"./HelperFunctions\";\r\n\r\nexport const SortingVisualizer: React.FC = () => {\r\n  const [bars, setBars] = useState([0]);\r\n  const [colorin, setColorin] = useState(0);\r\n  const [anotherColorin, setAnotherColorin] = useState(0);\r\n  const [isDisabled, setDisabledButton] = useState(false);\r\n\r\n  const generateBars = () => {\r\n    const arr = [];\r\n    let prettyColor = generateRandomNum(0, 255);\r\n    let anotherPrettyColor = generateRandomNum(0, 255);\r\n    while (arr.length < 255) {\r\n      let randomNum = generateRandomNum(1, 255);\r\n      if (arr.indexOf(randomNum) === -1) {\r\n        arr.push(randomNum);\r\n      }\r\n    }\r\n    setBars(arr);\r\n    setColorin(prettyColor);\r\n    setAnotherColorin(anotherPrettyColor);\r\n  };\r\n  useEffect(generateBars, []);\r\n\r\n  async function handleClickBubbleSort() {\r\n    let step = BubbleSort(bars);\r\n    setDisabledButton(true);\r\n    await drawEachStep(step, setBars);\r\n    setDisabledButton(false);\r\n  }\r\n\r\n  async function handleClickSelectionSort() {\r\n    let step = SelectionSort(bars);\r\n    setDisabledButton(true);\r\n    await drawEachStep(step, setBars);\r\n    setDisabledButton(false);\r\n  }\r\n\r\n  async function handleClickInsertionSort() {\r\n    let step = InsertionSort(bars);\r\n    setDisabledButton(true);\r\n    await drawEachStep(step, setBars);\r\n    setDisabledButton(false);\r\n  }\r\n\r\n  async function handleClickQuickSort() {\r\n    if (isAlreadySorted(bars)) {\r\n      return;\r\n    }\r\n    setDisabledButton(true);\r\n    await QuickSort(bars, 0, bars.length - 1, setBars);\r\n    setDisabledButton(false);\r\n  }\r\n\r\n  async function handleClickMergeSort() {\r\n    if (isAlreadySorted(bars)) {\r\n      return;\r\n    }\r\n\r\n    setDisabledButton(true);\r\n    await MergeSort(bars, 0, 255, setBars);\r\n    setDisabledButton(false);\r\n  }\r\n\r\n  async function drawEachStep(\r\n    step: AsyncGenerator<number[], number[], unknown>,\r\n    setBars: React.Dispatch<React.SetStateAction<number[]>>\r\n  ) {\r\n    while ((await step.next()).done === false) {\r\n      setBars([...(await step.next()).value]);\r\n    }\r\n  }\r\n\r\n  function isAlreadySorted(bars: number[]) {\r\n    for (let i = 0; i < bars.length - 1; i++) {\r\n      if (bars[i] > bars[i + 1]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"wrapper\"\r\n      style={{\r\n        height: \"max-content\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <h1 id=\"titulo\">Colorful Sort</h1>\r\n\r\n      <ResetArray\r\n        data-testid=\"resetArray\"\r\n        disabledButton={isDisabled}\r\n        generateBars={generateBars}\r\n        color1={colorin}\r\n        color2={bars}\r\n        color3={anotherColorin}\r\n      />\r\n      <Visualizer bars={bars} color1={colorin} color3={anotherColorin} />\r\n      <div className=\"button--wrapper\">\r\n        <button\r\n          disabled={isDisabled}\r\n          onClick={() => {\r\n            handleClickQuickSort();\r\n          }}\r\n        >\r\n          QuickSort\r\n        </button>\r\n        <button\r\n          disabled={isDisabled}\r\n          onClick={() => {\r\n            handleClickMergeSort();\r\n          }}\r\n        >\r\n          Merge Sort\r\n        </button>\r\n        <button\r\n          disabled={isDisabled}\r\n          onClick={() => {\r\n            handleClickInsertionSort();\r\n          }}\r\n        >\r\n          Insertion Sort\r\n        </button>\r\n        <button\r\n          disabled={isDisabled}\r\n          onClick={() => {\r\n            handleClickSelectionSort();\r\n          }}\r\n        >\r\n          Selection Sort\r\n        </button>\r\n        <button\r\n          disabled={isDisabled}\r\n          onClick={() => {\r\n            handleClickBubbleSort();\r\n          }}\r\n        >\r\n          Bubble Sort\r\n        </button>\r\n      </div>\r\n      <div className=\"about\">\r\n        <a\r\n          href=\"https://www.github.com/ramirofarias\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          <span>Ramiro Farias — GitHub</span>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { SortingVisualizer } from \"./SortingVisualizer/SortingVisualizer\";\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <SortingVisualizer />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}